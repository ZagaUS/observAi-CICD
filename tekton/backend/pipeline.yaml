apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-task
  namespace: testing-workspace
spec:
  workspaces:
    - name: source
    - name: dockerconfig
  params:
    - name: DOCKERFILE
      type: string
      default: './Dockerfile'
    - name: IMAGE_TAG
      description: Tag for the image
      type: string
      default: latest
    - name: TLSVERIFY
      default: 'false'
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      type: string
    - name: FORMAT
      default: oci
      description: 'The format of the built container, oci or docker'
      type: string
    - name: BUILD_EXTRA_ARGS
      default: ''
      description: Extra parameters passed for the build command when building images.
      type: string
    - name: CONTEXT
      default: .
      description: Path to the directory to use as context.
      type: string
  steps:
  - name: build-and-push
    image: registry.redhat.io/rhel8/buildah
    workingDir: $(workspaces.source.path) 
    securityContext:
      privileged: true
    script: |

      buildah  bud $(params.BUILD_EXTRA_ARGS) --format=$(params.FORMAT) --tls-verify=$(params.TLSVERIFY) --no-cache -f $(params.DOCKERFILE) -t quay.io/sharanya-zaga/test-image

      buildah push quay.io/sharanya-zaga/test-image:$(params.IMAGE_TAG)


---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: list-task
  namespace: testing-workspace
spec:
  workspaces:
    - name: source
  steps:
  - name: list
    image: docker.io/alpine/git
    workingDir: $(workspaces.source.path)
    script: |
      ls


---

apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata: 
  name: observai-backend
  namespace: testing-workspace
spec:
  params:
  - name: url
  - name: revision
  - name: DOCKERFILE
    default: 'src/main/docker/Dockerfile.jvm'
  - name: IMAGE_TAG
    default: latest
  - name: TLSVERIFY
    default: 'false'
  - name: FORMAT
    default: oci
  - name: BUILD_EXTRA_ARGS
    default: ''
  - name: CONTEXT
    default: .
  - name: DIRECTORY
  - name: CONTEXT_DIR
  workspaces:
    - name: shared-workspace
    - name: maven-settings
    - name: maven-local-m2
    - name: docker-credentials
  tasks:
#Git Clone Cluster Task
    - name: clone-from-git
      taskRef:
        name: git-clone
        kind: ClusterTask
      workspaces:
        - name: output
          workspace: shared-workspace
      params: 
        - name: url
          value: https://github.com/ZagaUS/observAi-backend.git
        - name: revision
          value: develop
#Maven pacakge
    - name: maven-run
      taskRef:
        name: maven
      workspaces:
        - name: maven-settings
          workspace: maven-settings
        - name: source
          workspace: shared-workspace
        - name: maven-local-repo
          workspace: maven-local-m2
      params:
        - name: CONTEXT_DIR
          value: ""
        - name: GOALS
          value:
            - -DskipTests
            - package
      runAfter:
      - clone-from-git
# Docker push
    - name: listing
      taskRef:
        name: list-task
      workspaces:
        - name: source
          workspace: shared-workspace
      runAfter:
      - maven-run
    - name: buildah
      taskRef:
        name: buildah-task
      params:
        - name: DOCKERFILE
          value: $(params.DOCKERFILE)
        - name: IMAGE_TAG
          value: $(params.IMAGE_TAG)
        - name: TLSVERIFY
          value: $(params.TLSVERIFY)
        - name: FORMAT
          value: $(params.FORMAT)
        - name: BUILD_EXTRA_ARGS
          value: $(params.BUILD_EXTRA_ARGS)
        - name: CONTEXT
          value: $(params.CONTEXT)
      workspaces:
      - name: dockerconfig
        workspace: docker-credentials
      - name: source
        workspace: shared-workspace
      runAfter:
       - maven-run
    # - name: deploy
    #   taskRef:
    #     name: openshift-client
    #     kind: ClusterTask
    #   params:
    #   - name: DIRECTORY
    #     value: $(params.DIRECTORY)
    #   - name: DEPLOYMENT_NAME
    #     value: $(params.DEPLOYMENT_NAME)
    #   - name: OC_NAMESPACE
    #     value: $(params.OC_NAMESPACE)
    #   - name: SCRIPT
    #     value: | 
    #             if kubectl get deploymentconfig $(params.DEPLOYMENT_NAME) -n $(params.OC_NAMESPACE) > /dev/null 2>&1; 
    #             then
    #             echo "Deployment Config $(params.DEPLOYMENT_NAME) exists."
    #             else
    #             oc apply -k $(params.DIRECTORY)
    #             fi                 
    #   workspaces:
    #   - name: manifest-dir
    #     workspace: shared-workspace
    #   runAfter:
    #    - buildah
